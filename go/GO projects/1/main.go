// // Проект для изучения Go
// // =========================
// //Проект: "Финансовый кошелёк"

// package main // точка входа в программу, обязательная для Go-программ
// import (
// 	"fmt"      // пакет fmt для форматированного ввода/вывода
// 	"net/http" // пакет net/http для работы с HTTP-сервером
// )

// func main() {
// 	// Регистрируем обработчик (handler) для пути "/ping"
// 	http.HandleFunc("/ping", func(w http.ResponseWriter, r *http.Request) {
// 		// Отправляем ответ "pong" в формате текста
// 		fmt.Fprint(w, "pong")
// 	})
// 	// Печатаем сообщение в консоль, что сервер запущен
// 	fmt.Println("Сервер запущен на порту 8080")
// 	// Запускаем HTTP-сервер на порту 8080
// 	if err := http.ListenAndServe(":8080", nil); err != nil {
// 		// Если произошла ошибка при запуске сервера, печатаем её в консоль
// 		fmt.Println("Ошибка запуска сервера:", err)
// 	}
// }

// // Примечания к проекту:
// // - Этот проект предназначен для изучения Go и создания простого HTTP-сервера.
// // - Он включает в себя базовую структуру Go-программы и регистрацию обработчиков HTTP-запросов.
// // - Сервер отвечает на запросы к пути "/ping" текстом "pong".
// // - После запуска сервера, он будет слушать на порту 8080.
// // - Этот проект может быть расширен для добавления функциональности, такой как работа с базой данных, аутентификация пользователей и другие функции, связанные с финансовым кошельком.

package main

// Объявление основного пакета программы

import (
	"encoding/json" // Для работы с JSON (кодирование/декодирование)
	"fmt"           // Для форматированного вывода
	"net/http"      // Для работы с HTTP (создание сервера, обработка запросов)
)

// Импорт необходимых пакетов

type User struct {
	ID    int    `json:"id"`    // Поле ID с тегом для JSON
	Name  string `json:"name"`  // Поле имени с тегом
	Email string `json:"email"` // Поле email с тегом
}

// Определение структуры User для хранения данных о пользователе

var users []User  // Глобальная переменная для хранения списка пользователей
var idCounter int // Счетчик для генерации ID новых пользователей

func getUsersHandler(w http.ResponseWriter, r *http.Request) {
	// Обработчик для получения списка пользователей
	if r.Method != http.MethodGet {
		// Если метод запроса не GET, возвращаем ошибку 405
		http.Error(w, "Метод не поддерживается", http.StatusMethodNotAllowed)
		return
	}

	w.Header().Set("Content-Type", "application/json") // Устанавливаем заголовок ответа
	json.NewEncoder(w).Encode(users)                   // Кодируем список пользователей в JSON и отправляем
}

func createUserHandler(w http.ResponseWriter, r *http.Request) {
	// Обработчик для создания нового пользователя
	if r.Method != http.MethodPost {
		// Если метод запроса не POST, возвращаем ошибку 405
		http.Error(w, "Метод не поддерживается", http.StatusMethodNotAllowed)
		return
	}

	var newUser User // Создаем переменную для нового пользователя

	// Декодируем JSON-тело запроса в структуру User
	if err := json.NewDecoder(r.Body).Decode(&newUser); err != nil {
		http.Error(w, "Неверный формат данных", http.StatusBadRequest)
		return
	}

	idCounter++            // Увеличиваем счетчик ID
	newUser.ID = idCounter // Присваиваем новый ID пользователю

	users = append(users, newUser) // Добавляем нового пользователя в список

	w.Header().Set("Content-Type", "application/json") // Устанавливаем заголовок ответа
	json.NewEncoder(w).Encode(newUser)                 // Кодируем и отправляем нового пользователя в ответе
}

func usersHandler(w http.ResponseWriter, r *http.Request) {
	// Основной обработчик для пути "/users"
	switch r.Method {
	case http.MethodGet:
		// Если метод GET, возвращаем список пользователей
		getUsersHandler(w, r)
	case http.MethodPost:
		// Если метод POST, создаем нового пользователя
		createUserHandler(w, r)
	default:
		// Если метод не поддерживается, возвращаем ошибку 405
		http.Error(w, "Метод не поддерживается", http.StatusMethodNotAllowed)
	}
}

func main() {
	http.HandleFunc("/users", usersHandler)
	// Регистрируем обработчик для пути "/users"

	fmt.Println("Сервер запущен на http://localhost:8080")
	// Выводим сообщение о запуске сервера
	http.ListenAndServe(":8080", nil)
	// Запускаем HTTP сервер на порту 8080
}

// Примечания к проекту:
// - Этот проект расширяет предыдущий пример, добавляя функциональность для создания пользователей.
// - Он использует структуру `User` для представления пользователя с полями ID, Name и Email.
// - Реализован обработчик `createUserHandler`, который принимает POST-запросы для создания новых пользователей.
// - При получении запроса, сервер проверяет метод, разбирает JSON-тело запроса и добавляет нового пользователя в список.
// - Сервер отвечает созданным пользователем в формате JSON.
// - Этот проект может быть расширен для добавления других функций, таких как получение списка пользователей, обновление и удаление пользователей.
// - Сервер слушает на порту 8080 и доступен по адресу http://localhost:8080/users для создания новых пользователей.
// - Для тестирования можно использовать инструменты, такие как Postman или curl, для отправки POST-запросов с JSON-телом, содержащим имя и email пользователя.
// - Пример JSON-тела запроса для создания пользователя:
//   ```json
//   {
//     "name": "Иван Иванов",
//     "email": "i.ivanov@example.com"
//   }
//   ```
