// Функции
package main

import (
	"fmt"
)

// Функции в Go позволяют организовать код и повторно использовать его.
// Функции могут принимать параметры и возвращать значения.
// Вот пример функции без параметров и возвращаемых значений:
// Функция без параметров
func hello() {
	fmt.Println("Привет!")
}

// Функция с параметром
// Функция с параметром принимает строку и выводит приветствие
func greet(name string) {
	fmt.Println("Привет, " + name + "!, Приятно познакомиться!")
}

// Функция с возвращаемым значением
// Функция sum принимает два целых числа и возвращает их сумму
func sum(a int, b int) int {
	// Функция sum принимает два целых числа и возвращает их сумму
	return a + b
}

// Функция с несколькими возвращаемыми значениями
// Функция divide принимает два целых числа и возвращает частное и остаток от деления
func divide(a int, b int) (int, int) {
	// Функция divide принимает два целых числа и возвращает частное и остаток от деления
	if b == 0 {
		fmt.Println("Ошибка: деление на ноль!")
		return 0, 0
	}
	return a / b, a % b
}

// Функция с именованным возвращаемым значением
// Функция square принимает целое число и возвращает его квадрат
// Именованное возвращаемое значение позволяет явно указать имя возвращаемого значения
// Это может сделать код более читаемым и понятным
// Именованное возвращаемое значение
// позволяет избежать необходимости указывать имя переменной при возврате значения
func square(x int) (square int) {
	// Функция square принимает целое число и возвращает его квадрат
	square = x * x
	return
}

func isEven(n int) bool {
	// Функция isEven проверяет, является ли число четным
	return n%2 == 0
}

func main() {
	// Вызов функции
	hello()
	// Вызов функции с параметром
	greet("Алексей")

	// Вызов функции с возвращаемым значением
	result := sum(5, 10)
	fmt.Println("Сумма:", result)

	// Вызов функции с несколькими возвращаемыми значениями
	quotient, remainder := divide(10, 3)
	fmt.Println("Частное:", quotient, "Остаток:", remainder)

	// Вызов функции с именованным возвращаемым значением
	num := 9
	sq := square(num)
	fmt.Println("Квадрат числа", num, ":", sq)

	// Проверка, является ли число четным
	if isEven(num) {
		fmt.Println(num, "является четным числом.")
	} else {
		fmt.Println(num, "является нечетным числом.")
	}

	// Анонимные функции
	// Анонимные функции - это функции без имени, которые можно использовать для создания функций на лету
	func(x int) {
		fmt.Println("Анонимная функция:", x)
	}(42)
	// Анонимные функции могут быть присвоены переменным
	anonymousFunc := func(y int) {
		fmt.Println("Анонимная функция с переменной:", y*y)
	}
	anonymousFunc(5)
}
