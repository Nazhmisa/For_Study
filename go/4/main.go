/*
	Примитивные числовые типы в Go
	В Go есть несколько примитивных числовых типов, которые можно использовать для представления целых и вещественных чисел. Вот основные из них:
	- int: Целое число, размер зависит от платформы (32 или 64 бита).
	- int8: Целое число со знаком, 8 бит.
	- int16: Целое число со знаком, 16 бит.
	- int32: Целое число со знаком, 32 бита.
	- int64: Целое число со знаком, 64 бита.
	- uint: Беззнаковое целое число, размер зависит от платформы (32 или 64 бита).
	- uint8: Беззнаковое целое число, 8 бит.
	- uint16: Беззнаковое целое число, 16 бит.
	- uint32: Беззнаковое целое число, 32 бита.
	- uint64: Беззнаковое целое число, 64 бита.
	- float32: Вещественное число с плавающей запятой, 32 бита.
	- float64: Вещественное число с плавающей запятой, 64 бита.



*/

package main

import (
	"fmt"
)

func main() {

	// // Примеры использования числовых типов
	var a int = 10
	// var b int64 = 20
	// var c float32 = 3.14
	// var d float64 = 2.71828

	// fmt.Println("a:", a)
	// fmt.Println("b:", b)
	// fmt.Println("c:", c)
	// fmt.Println("d:", d)

	// // Арифметические операции
	// sum := a + int(b) // Приведение типа int64 к int

	// product := c * float32(d) // Приведение типа float64 к float32
	// // Обратите внимание, что в Go необходимо явно приводить типы при выполнении арифметических операций между разными типами

	// fmt.Println("Сумма:", sum)
	// fmt.Println("Произведение:", product)

	fmt.Printf("Вывожу число: %d\n", a) // Выводит: Вывожу число: 10
	// Пример форматирования с использованием %d для целых чисел
	fmt.Printf("Вывожу число: %f\n", 3.14) // Выводит: Вывожу число: 3.140000
	// Пример форматирования с использованием %f для вещественных чисел
	fmt.Printf("Вывожу число: %s\n", "Hello, Go!") // Выводит: Вывожу число: Hello, Go!
	// Пример форматирования с использованием %s для строк
}
